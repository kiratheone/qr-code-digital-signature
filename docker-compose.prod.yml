version: '3.8'

services:
  qds-frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - "8065:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - qds-backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  qds-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8112}:${PORT:-8112}"
    environment:
      - PORT=${PORT:-8112}
      - DB_HOST=qds-postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL_MODE=${DB_SSL_MODE:-require}
      - JWT_SECRET=${JWT_SECRET}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - PUBLIC_KEY=${PUBLIC_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      qds-postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # Note: Health check disabled for scratch-based image
    # External monitoring should be used instead

  qds-postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5434}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge